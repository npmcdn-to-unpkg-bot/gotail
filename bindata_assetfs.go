// Code generated by go-bindata.
// sources:
// static/js/app.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticJsAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x95\xd1\x4e\xe3\x3a\x10\x86\xef\x79\x8a\x39\xd5\x91\xe2\x4a\x21\xdc\x87\xa6\x47\x9c\xc2\x6a\xd1\x02\x8b\xca\xde\x21\xb4\xb8\xc9\x14\x22\xd2\x38\x6b\x3b\xdb\x56\x51\xde\x7d\xc7\x8e\x93\x26\xa1\x12\x48\x9b\x8b\x12\xd9\x93\x7f\xc6\xff\x7c\x1e\xb6\x69\x9e\x88\x6d\x70\x51\x14\x10\x01\x63\x4a\xc4\x6f\xa8\xa7\x10\xcd\xa1\x3a\x01\x7a\xe2\x8c\x2b\x05\x0b\x91\x6b\xcc\xf5\x52\x6c\x01\x77\xf4\x96\x28\x58\x22\x8f\x75\xb0\x10\x9b\x42\xe4\xb4\xe5\xc2\xcd\x23\x69\x1f\x25\x9b\xf6\x96\xac\x92\xc8\x15\x85\x01\x25\xc4\x9d\x0f\x09\xd7\xdc\x07\x85\x19\xc6\x1a\x13\x1f\x44\xbe\xc8\xd2\xf8\xed\x2b\xcf\x93\x0c\x25\xd4\x54\x8e\x7e\x4d\x55\x50\x48\x51\xa8\x23\x42\x52\x6c\x17\xb6\xb6\xa8\x13\x81\xff\x60\x12\x1b\x11\xbe\xca\xf0\x94\x02\x28\xd7\x5a\x4c\x20\x1c\x2d\x4f\x06\x72\x12\x75\x29\x73\x98\x69\x09\x6f\xb8\x8f\xaa\x67\x8a\x38\xfd\xb7\xb2\x65\xd6\xcf\x75\x5b\x58\x54\x01\x43\x6b\xcc\xb0\x52\x86\x7e\x73\xa4\x29\xd5\x6c\xdd\xba\xe3\x1b\xa4\xe8\xae\xc0\x7a\x3e\xc8\x67\x9e\x99\x4e\x7a\xc9\x62\xcc\xb2\x5e\xc6\x79\x65\xcd\x81\x7a\x76\xa6\x93\xe1\xb7\xb4\x22\xe7\xe7\xdd\x52\x7d\xd2\xfc\xf6\x3a\xf5\x25\xcd\xd0\x75\xeb\x6f\x5b\x25\xf2\x9b\x34\x47\x7b\x56\xf2\x96\xe8\x30\x27\x4d\x76\xd6\x83\x24\x55\x05\xd7\xf1\x2b\xab\x40\xef\x0b\x0c\xc1\xbb\xbd\x58\x7e\xfb\x79\x73\x7d\x77\xe5\x39\x3f\x42\x13\x0c\xf5\xf4\x28\x04\x19\x29\x2b\x1f\xe2\x46\xdc\xef\xf4\x3e\xd5\x77\xd3\x73\x2b\x10\x6c\x78\xc1\x98\x79\xed\x7a\xd0\x81\x7b\xac\xc5\x3d\x8c\x6d\x78\xe4\x68\xa4\xac\xc6\xf1\xa8\xa9\x2b\x68\xdc\xef\xb0\x6a\x97\x3b\xcc\xea\x11\x02\x14\x30\xf4\xaa\x3e\x1b\xb6\xad\x9e\x9e\x1f\x47\xce\x10\xd9\x83\x66\xd2\x2c\xd8\xdf\xd3\x57\xf1\x1b\xe5\x64\x3e\xd3\x2b\x91\xec\xdf\x23\x54\x19\x23\xea\x31\x1d\x36\x96\xfe\x1a\x85\xf9\x71\x4e\x7a\x84\x58\x93\x7f\x50\xff\x8c\xa3\xad\x6d\xd6\xd9\xd0\x41\x73\xdf\x06\x04\x5c\x4a\xbe\x0f\x52\xb5\xc4\x5f\x65\x2a\x31\xe9\x4b\xae\xcb\x3c\xd6\xa9\xc8\x61\x7d\xd0\x56\x4c\x69\xae\xa9\x31\xdc\x6e\xf5\x11\x4b\xd7\xc0\x0c\x35\x62\x0d\x36\x06\xa2\x28\x02\xaf\xa4\x4e\xac\x29\x77\xe2\x0d\x71\x74\x66\x55\xae\xae\xc7\xa7\x7a\x74\x2e\xf3\xa8\x6d\x6a\xe8\x61\x4d\xb2\xc0\xa8\x0f\x55\x62\xae\x10\xbc\x8b\xfb\xfb\xab\xbb\x4b\x2f\x1c\xd8\x66\x6b\x08\x1a\xa0\x8a\x52\x19\xa6\x0d\x01\xa1\xab\x3c\x70\xac\xb6\xed\x0f\x61\xcd\x33\x12\x1b\x91\xed\xca\xb4\x62\xef\xf2\x1e\x2e\xc7\x30\xb5\x71\xc2\x65\x69\x40\x4c\xf3\x7e\x39\xe3\x7b\x39\xaa\xf6\xb1\xff\xe9\xd3\x81\xcf\x08\xfe\xf9\x38\x6a\x08\xe8\x67\x8e\x42\xed\xe1\x65\xa6\xc3\x8f\x63\xeb\xa3\x70\x1c\x19\x36\x16\xb2\xcb\xef\xb7\x81\xdb\x1b\xe2\xdc\x9f\x65\xf6\x28\x74\xd1\x94\x16\x12\x83\x17\xd4\x0f\x26\x23\x9b\x36\x67\x34\x17\xd8\x4d\x10\x02\xd9\x05\x1d\x66\xca\xd9\xdc\x1f\x28\x27\x22\x2e\x37\x86\x7f\xd2\xb9\xca\xd0\xbc\xfe\xbf\xbf\x4e\x98\x17\x37\xd9\xbc\x43\x6b\xa7\x83\x11\x6b\x27\x90\x55\x27\x93\x97\x98\x94\xbb\x20\x96\x48\x85\x3c\x98\x35\xd6\xc7\xbf\xf9\xb0\x3d\xf3\x49\xd3\x3a\x53\x96\x2a\x57\x2a\x96\xe9\x0a\x59\xb3\xe9\xf6\xec\x3f\xde\x40\xe4\x1b\x54\x8a\xbf\x18\x7d\xb6\x51\x2f\xa3\x81\x66\x78\xa1\x55\x3b\xa1\xc6\x70\x0c\x0f\x7d\x18\xcc\x8e\x79\xbf\xbd\xd8\xed\xf7\x7d\x80\xdb\x86\xd1\xd2\x9f\x00\x00\x00\xff\xff\xd7\x5d\xbf\x4f\x11\x08\x00\x00")

func staticJsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJsAppJs,
		"static/js/app.js",
	)
}

func staticJsAppJs() (*asset, error) {
	bytes, err := staticJsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/js/app.js", size: 2065, mode: os.FileMode(420), modTime: time.Unix(1457430828, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/js/app.js": staticJsAppJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"app.js": &bintree{staticJsAppJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
