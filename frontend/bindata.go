// Code generated by go-bindata.
// sources:
// ../static/index.tmpl
// DO NOT EDIT!

package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _StaticIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x51\x6f\xd3\x30\x10\x7e\xcf\xaf\x30\x7e\xda\x34\xd5\xa6\xeb\xc6\x22\x48\x22\x2a\xba\x21\x21\xd0\x2a\xad\xac\x82\x37\xc7\xb9\x26\x4e\x1d\x3b\xd8\x57\x92\x32\xf5\xbf\xe3\x34\x83\x49\x48\x93\x78\x58\x1e\x92\xcb\x77\x77\xdf\x97\xfb\x72\x4e\x5e\x2d\x6e\x3f\xac\xbe\x2d\xaf\x49\x85\x8d\xce\xa2\x64\x78\x10\x2d\x4c\x99\x52\x30\x74\x00\x40\x14\x59\x44\xc2\x95\x34\x80\x82\xc8\x4a\x38\x0f\x98\xd2\xaf\xab\x9b\x49\x4c\x1f\x53\xa8\x50\x43\xf6\xf0\xc0\x56\x43\x70\x38\x24\x7c\x44\xc6\xac\x97\x4e\xb5\x48\xbc\x93\x29\xad\x10\x5b\xff\x96\x73\x59\x98\xda\x33\xa9\xed\xae\xd8\x68\xe1\x80\x49\xdb\x70\x51\x8b\x9e\x6b\x95\x7b\xee\x40\x48\xe4\xaf\xd9\xf4\x82\x5d\x8d\x2f\xac\xf6\x34\x4b\xf8\xc8\xf5\x92\xc4\x93\xc2\x36\x2f\x44\x9e\x8b\x1c\xf4\x44\x5a\x07\xfc\x92\xc5\xec\x7c\xc6\x73\x67\x3b\x0f\x8e\x35\xca\xfc\xaf\x86\x69\x9b\x20\x73\x64\x76\x50\xec\xfa\xf7\x5a\x20\x78\xe4\x85\x0a\xb7\x23\xf2\x1c\x9b\x56\x66\x4b\x1c\xe8\x94\x7a\xdc\x6b\xf0\x15\x00\x52\x52\x39\xd8\x3c\xb1\x37\xa2\x1f\xd8\x73\x6b\xd1\xa3\x13\xed\x1f\xa9\xbf\x00\x9f\xb1\x19\x7b\xc3\xa5\xf7\x4f\xd8\x51\x30\x20\x94\x28\x83\x50\x3a\x85\xfb\xa0\x51\x89\x59\x7c\x31\x99\xfe\x88\x9b\xd5\xa7\xdb\xf9\x5d\x1f\xd7\xd3\xf9\xee\x4c\x5c\xae\x17\xf7\x66\xa9\xce\xf5\xf6\x66\xd3\x75\xd7\x73\x11\x57\x8b\x45\x51\x7f\xd7\xed\x67\x28\xfb\xaa\xbe\xff\x72\x3d\xdd\x94\xf5\x7a\xf9\xb1\xd9\xfe\xf2\x57\x94\x48\x67\xbd\xb7\x4e\x95\xca\xa4\x54\x18\x6b\xf6\x8d\xdd\xf9\x61\xf9\xf8\xb8\x7d\x49\x6e\x8b\x7d\x16\x45\x49\xa1\x7e\x12\x55\xa4\x54\xda\xf0\x19\x26\xcc\x26\xb5\xf0\x3e\xa5\xda\x96\x83\x19\x21\x1d\x8a\x1f\x3d\xc5\x7d\x0b\x29\x45\xe8\x71\xfc\x2d\x74\x74\x99\x7b\x14\xa8\x24\xaf\x3d\x17\x6d\xfb\x8f\x8b\xcf\xf6\x66\x51\xa7\x4c\x61\x3b\x36\x6f\xdb\x13\x03\x1d\x59\x43\x7e\x67\xe5\x16\xf0\x84\x86\xad\x5f\xdf\x2d\x9d\x45\x2b\xad\x3e\x1c\x82\xc7\x94\x9c\x91\xc7\x7a\x6d\x65\x90\xb3\x86\x55\xd6\x63\x80\x83\xfe\xb1\x8d\x9e\x9e\xbe\x8b\x9e\x84\x43\x38\xce\x18\x46\x3e\x1e\xc4\xdf\x01\x00\x00\xff\xff\xcf\x25\x0f\xe4\x99\x03\x00\x00")

func StaticIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_StaticIndexTmpl,
		"../static/index.tmpl",
	)
}

func StaticIndexTmpl() (*asset, error) {
	bytes, err := StaticIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../static/index.tmpl", size: 921, mode: os.FileMode(420), modTime: time.Unix(1456848458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../static/index.tmpl": StaticIndexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"static": &bintree{nil, map[string]*bintree{
			"index.tmpl": &bintree{StaticIndexTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

